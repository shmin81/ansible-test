---

- name: clear old datas
  file:
    path: '{{ besu_temp_dir }}'
    state: absent
  become: true
  when: true

- name: create new besu network datas
  #command: '{{ besu_current_dir }}/bin/besu operator generate-blockchain-config --config-file={{ besu_config_dir }}/ibftConfigFile.json --to={{ besu_config_dir }}/node --private-key-file-name=key'
  command: '{{ besu_exec_binary }} operator generate-blockchain-config --config-file={{ besu_config_dir }}/ibftConfigFile.json --to={{ besu_temp_dir }} --private-key-file-name=key'
  register: result_infos
  become: true
  when: true

- name: print besu result
  debug: 
    var: result_infos

- name: Create besu configuration directory
  file:
    path: "{{ besu_node_dir }}"
    state: directory
    owner: "{{ besu_user }}"
    group: "{{ besu_group }}"
    recurse: yes
  become: true

# jenesis.json 및 node key 등 복사
- name: copy all datas
  block:
  - name: find node key
    find:
      #paths: "{{ besu_config_dir }}/node"
      paths: "{{ besu_temp_dir }}"
      file_type: file
    # excludes: 
    #   - genesis.json
    #   - key.pub
      recurse: yes
    register: file_infos

  - name: print besu key
    debug: 
      var: file_infos.matched

  - name: print besu key
    debug: 
      var: file_infos.files
    when: file_infos.matched > 0

# - name: copy key
#   copy: 
#     src: '{{ file_infos.files[0].path }}'
#     dest: '{{ besu_node_private_key_file }}'
#     remote_src: yes
#     owner: "{{ besu_user }}"
#     group: "{{ besu_group }}"
#     mode: 0644
#   when: file_infos.matched == 1

  - name: copy files
    copy: 
      src: '{{ fileItem.path }}'
      dest: '{{ besu_node_dir }}/'
      remote_src: yes
      owner: "{{ besu_user }}"
      group: "{{ besu_group }}"
      mode: 0644
    with_items: "{{ file_infos['files'] }}"
    loop_control: 
      loop_var: fileItem

  - name: read key.pub 
    # lookup은 로컬에서만 쓸수있다고 함. 
    # vars:
    #   contents: "{{ lookup('file', '{{ besu_node_dir }}/key.pub') }}"
    block:
      - name: read key.pub
        command: 'cat {{ besu_node_dir }}/key.pub'
        register: contents
      - name: test debug
        debug:
          msg: "enode value is {{ contents }}"
      - name: get bootnode enode
        shell: |
          eNodeStr={{ contents.stdout }}
          echo ${eNodeStr:2}
        args:
          executable: /bin/bash
        register: enode_contents
      - name: set bootnode enode
        set_fact: 
          enode: 'enode://{{ enode_contents.stdout }}@{{ ansible_host }}:{{ besu_p2p_port }}'
          cacheable: yes
      - name: save bootnode enode
        shell: |
          eNodeStr={{ enode }}
          echo $eNodeStr > {{ besu_node_dir }}/enode.txt
        args:
          executable: /bin/bash
        register: save_enode_contents

    become: true
    when: True

  - name: Copy remote enode.txt file (boot node)
    fetch:
      src: '{{ besu_node_dir }}/enode.txt'
      dest: './generated/{{ inventory_hostname }}{{ besu_boot_enode_post_fix }}'
      # dest: './generated' # false일 경우에는 심플하게 사용
      flat: True  # true인 경우, 로컬에 저장될때의 서버에서의 full path를 유지하지 않음  
    register: fetch_result
    when: is_boot_node

  - name: Copy remote enode.txt file (not boot node)
    fetch:
      src: '{{ besu_node_dir }}/enode.txt'
      dest: './generated/{{ inventory_hostname }}{{ besu_static_enode_post_fix }}'
      # dest: './generated' # false일 경우에는 심플하게 사용
      flat: True  # true인 경우, 로컬에 저장될때의 서버에서의 full path를 유지하지 않음  
    register: fetch_result
    when: not is_boot_node

  - name: copy result
    debug: 
      var: fetch_result
    when: True

  when: roll_option == 'all'
  become: true

- name: copy genesis only
  copy: 
    src: '{{ besu_temp_dir }}/genesis.json'
    dest: '{{ besu_node_dir }}/'
    remote_src: yes
    owner: "{{ besu_user }}"
    group: "{{ besu_group }}"
    mode: 0644

  when: roll_option == 'genesis'
  become: true

- name: find bootnode file 
  block:
    - name: find bootnode file
      find:
        paths: "./generated/"
        file_type: file
        patterns: '*{{ besu_boot_enode_post_fix }}'
      register: boot_file_info

    - name: test debug 1
      debug:
        var: boot_file_info

    - name: read key.pub
      command: 'cat {{ boot_file_info.files[0].path }}'
      register: contents

    - name: test debug 2
      debug:
        msg: "enode value is {{ contents.stdout }}"

    - set_fact:
        enode: '{{ contents.stdout }}'
        cacheable: yes
  run_once: true
  delegate_to: controller
  when: True
  #when: besu_boot_enode_path is undefined

# - name: read bootnode 
#   vars:
#     enode_contents: "{{ lookup('file', '{{ besu_boot_enode_path }}') }}"
#   block:
#     - name: test debug
#       debug:
#         msg: "enode value is {{ enode_contents }} in {{ besu_boot_enode_path }}"
#     # - name: get bootnode enode
#     #   shell: |
#     #     eNodeStr={{ contents }}
#     #     echo ${eNodeStr:2}
#     #   args:
#     #       executable: /bin/bash
#     #   register: enode_contents
#     # - name: set bootnode enode
#     #   set_fact: 
#     #     enode: 'enode://{{ enode_contents.stdout }}@....'
#     #     cacheable: yes
#     - name: set bootnode enode
#       set_fact: 
#         enode: '{{ enode_contents }}'
#         cacheable: yes
#   run_once: true
#   delegate_to: controller
#   when: true # is_boot_node

- name: show bootnode 
  debug:
    var: enode
